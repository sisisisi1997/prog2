TODO: megírni ezt a jegyzőkönyvet DOCBOOK-ként

Első hét:
- OO szemlélet:
  Fájlok: PolarGenerator.java, PolarGenerator.class, PolarGenerator.cpp, PolarGeneratorCPP.run
  
  Java kód forrása a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf diájából
  Java kód kommentelve (kód megértésének demonstrálására)
  Kód átültetve C++-ba - változtatások: random számok forrása a C 'rand()' függvény, azonban ez nem 0 és 1 közötti számokat ad, ez javítva (rand() / RAND_MAX alakban)
- Yoda:
  Fájlok: Yoda.java, Yoda.class
  
  A kód bekér egy stringet. Amennyiben a string tartalmazza a "foo" karaktersorozatot, az értékét null-ra állítja.
  A stringet a "bar" karaktersorozathoz hasonlítja "bar.equals(str)" formában - amennyiben str már null, az ellenkező sorrend NullPointerException-t dobna.
- From Scratch:
  Fájlok: BBP.java, BBP.class
  
  Működés: A kód bekér egy indulópozíciót és egy hosszot, majd kiírja az indulópozíció + 1-től kezdve hosszon keresztül a pi hexadecimális jegyeit.
  Hibajavítás: A használt algoritmus helyessége függ a floating point arithmetic pontosságától a használt gépen, így a kiszámolt összes jegy helyett csak az első 4-et használja fel.
  Ennyi mindig helyesnek bizonyult, és a 32/64 bit váltakozáson kívül (talán ezzel együtt is, TODO: utánanézni) a JVM konzisztensen adja meg a típusok pontosságát.
- homokozó
  Fájlok: LZW_servlet.java
  
  Állapot: servlet alap kódja megírva. LZW binfa kódja folyamatban.
- gagyi
  Elkezdve: 2018.09.19. (labor kezdete előtt)
  Fájlok: gagyi.java
  
  Állapot: használt osztály létrehozva, Integer.java tanulmányozása folyamatban
- megjegyzés: a feladatok kezdésének és befejezésének dokumentálása 2018.09.19-én kezdődött, minden feladat aminél ez az adat nem szerepel, hamarabb lett elkezdve és/vagy befejezve.

Második hét:
- Liskov:
  Elkezdve: 2018. 09.19. (labor kezdete után)
  Fájlok:
  - Liskov.java, Liskov.cpp: felhasználják a 'StringNumber' és 'ComplexStringNumber' osztályt oly módon, amely megmutatja az elv megsértését
  - StringNumber.java: Egy olyan osztály, amely String reprezentációban kezel számokat.
  - ComplexStringNumber.java: Egy olyan osztály, amely String reprezentációban kezel komplex számokat.
  
  Megoldás: A számok összehasonlítása 'nagyobb' és 'kisebb' voltukra egy olyan feladat, amely komplex számok esetén értelmét veszti.
  
  Állapot:
  - 2018.09.18.: fájlok létrehozva, jegyzőkönyvbe felvezetve a feladat, implementáció elkezdve
- Szülő-gyerek
  Elkezdve: 2018.09.26., 09:07
  Fájlok: Szulo.java, Gyerek.java, SZGYmain.java
  
  Megoldás: A Gyerek osztály felülírja a szülő osztály egy metódusát, valamint egy sajátot is definiál.
            A fő osztályból
			1) elkészítjük a gyerek osztály példányát egy Szülő típusú változóba
			2) meghívjuk a felülírt metódust cast nélkül
			3) meghívjuk a felülírt metódust casttal
			4) megpróbáljuk meghívni az új metódust cast nélkül
			5) meghívjuk az új metódust casttal
  
  Állapot:
  - 2018.09.26.: fájlok létrehozva, jegyzőkönyvbe felvéve a feladat, implementációban hiba - okát megtalálni
- Anti OO
  Elkezdve: 2018.09.26. 09:31
  Fájlok: BBPTimer.cpp
  
  Állapot:
  - 2018.09.26.:
    - az időmérő C++ verziójához fájlok létrehozva
	- Az időmérő java verziójához fájlok létrehozva és implementáció elkezdve
	- Előző hétről a BBP java implementáció átmásolva az eheti feladathoz
- Hello, Android!
  Elkezdve: 2018.09.26. 09:48
  
  Állapot:
  - 2018.09.26.: Samu-Entropy leszedve githubról. Átnézés folyamatban.
- Ciklomatikus komplexitás
  Elkezdve: 2018.09.26. 09:51
  
  Állapot:
  - 2018.09.26.: használt képlet a wikipédián talált lesz. Kiválasztott metódus elemzésre: helper.StringNumber.isGreaterThan() metódus, amely két szövegként eltárolt számról állapítja meg, hogy az első nagyobb-e a másodiknál