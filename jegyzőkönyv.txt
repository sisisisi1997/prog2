TODO: megírni ezt a jegyzőkönyvet DOCBOOK-ként

Első hét:
- OO szemlélet:
  Fájlok: PolarGenerator.java, PolarGenerator.class, PolarGenerator.cpp, PolarGeneratorCPP.run
  
  Java kód forrása a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf diájából
  Java kód kommentelve (kód megértésének demonstrálására)
  Kód átültetve C++-ba - változtatások: random számok forrása a C 'rand()' függvény, azonban ez nem 0 és 1 közötti számokat ad, ez javítva (rand() / RAND_MAX alakban)
- Yoda:
  Fájlok: Yoda.java, Yoda.class
  
  A kód bekér egy stringet. Amennyiben a string tartalmazza a "foo" karaktersorozatot, az értékét null-ra állítja.
  A stringet a "bar" karaktersorozathoz hasonlítja "bar.equals(str)" formában - amennyiben str már null, az ellenkező sorrend NullPointerException-t dobna.
- From Scratch:
  Fájlok: BBP.java, BBP.class
  
  Működés: A kód bekér egy indulópozíciót és egy hosszot, majd kiírja az indulópozíció + 1-től kezdve hosszon keresztül a pi hexadecimális jegyeit.
  Hibajavítás: A használt algoritmus helyessége függ a floating point arithmetic pontosságától a használt gépen, így a kiszámolt összes jegy helyett csak az első 4-et használja fel.
  Ennyi mindig helyesnek bizonyult, és a 32/64 bit váltakozáson kívül (talán ezzel együtt is, TODO: utánanézni) a JVM konzisztensen adja meg a típusok pontosságát.
- homokozó
  Fájlok: LZW_servlet.java
  
  Állapot: servlet alap kódja megírva. LZW binfa kódja folyamatban.
- gagyi
  Elkezdve: 2018.09.19. (labor kezdete előtt)
  Fájlok: gagyi.java
  
  Állapot: használt osztály létrehozva, Integer.java tanulmányozása folyamatban
- megjegyzés: a feladatok kezdésének és befejezésének dokumentálása 2018.09.19-én kezdődött, minden feladat aminél ez az adat nem szerepel, hamarabb lett elkezdve és/vagy befejezve.

Második hét:
- Liskov:
  Elkezdve: 2018. 09.19. (labor kezdete után)
  Fájlok:
  - Liskov.java, Liskov.cpp: felhasználják a 'StringNumber' és 'ComplexStringNumber' osztályt oly módon, amely megmutatja az elv megsértését
  - StringNumber.java: Egy olyan osztály, amely String reprezentációban kezel számokat.
  - ComplexStringNumber.java: Egy olyan osztály, amely String reprezentációban kezel komplex számokat.
  
  Megoldás: A számok összehasonlítása 'nagyobb' és 'kisebb' voltukra egy olyan feladat, amely komplex számok esetén értelmét veszti.
  
  Állapot:
  - 2018.09.18.: fájlok létrehozva, jegyzőkönyvbe felvezetve a feladat, implementáció elkezdve
- Szülő-gyerek
  Elkezdve: 2018.09.26., 09:07
  Fájlok: Szulo.java, Gyerek.java, SZGYmain.java
  
  Megoldás: A Gyerek osztály felülírja a szülő osztály egy metódusát, valamint egy sajátot is definiál.
            A fő osztályból
			1) elkészítjük a gyerek osztály példányát egy Szülő típusú változóba
			2) meghívjuk a felülírt metódust cast nélkül
			3) meghívjuk a felülírt metódust casttal
			4) megpróbáljuk meghívni az új metódust cast nélkül
			5) meghívjuk az új metódust casttal
  
  Állapot:
  - 2018.09.26.: fájlok létrehozva, jegyzőkönyvbe felvéve a feladat, implementációban hiba - okát megtalálni
- Anti OO
  Elkezdve: 2018.09.26. 09:31
  Fájlok: BBPTimer.cpp, BBPTimer.java
  
  Állapot:
  - 2018.09.26.:
    - az időmérő C++ verziójához fájlok létrehozva
	- Az időmérő java verziójához fájlok létrehozva és implementáció elkezdve
	- Előző hétről a BBP java implementáció átmásolva az eheti feladathoz
	- megállapítás: az időmérő implementálása után kiderült, hogy a BBP feladatban használt algoritmus implementáció túl lassú időméréshez min. 10^6 számjegy esetén - optimalizáció szükséges
	- megjegyzés: a különböző nyelvek között használt implementáció (logikailag) meg kell, hogy egyezzen ahhoz, hogy a mérés reprezentatív legyen arra nézve, hogy mi maga a futási sebesség közötti különbség
- Hello, Android!
  Elkezdve: 2018.09.26. 09:48
  
  Állapot:
  - 2018.09.26.: Samu-Entropy leszedve githubról. Átnézés folyamatban.
- Ciklomatikus komplexitás
  Elkezdve: 2018.09.26. 09:51
  
  Állapot:
  - 2018.09.26.: használt képlet a wikipédián talált lesz. Kiválasztott metódus elemzésre: helper.StringNumber.isGreaterThan() metódus, amely két szövegként eltárolt számról állapítja meg, hogy az első nagyobb-e a másodiknál

Harmadik hét: munkaeszköz meghibásodása miatt negyedik hét határidejéig pótolva
- Forward UML
  Elkezdve: 2018.10.09.
  Befejezve: 2018.10.09.
  Fájlok: forward.zargo, HeadPhone.h, HeadPhone.cpp, HeadPhoneManufacturer.h, HeadPhoneManufacturer.cpp
  
  Megoldás:
   ArgoUML program segítségével készítettem két osztálydiagramot, amelyek leírják a HeadPhone és a HeadPhoneManufacturer osztályt.
   Az osztályok tartalmaznak private elemeket, public gettereket ezekhez az elemekhez, és egy-egy konstruktort, melyeket az ArgoUML az osztálydiagramok alapján generált.
  
  Megjegyzés: a .zargo kiterjesztésű fájl az ArgoUML projekt fájlja.
- BPMN
  Elkezdve: 2018.10.09.
  Befejezve: 2018.10.09.
  Fájlok: bpmn.jpg, mely egy fotó a lerajzolt BPMN diagramról
  
  Megoldás:
   BPMN diagram feladatmegoldásról programozás laborra, melynek elemei a következők:
    Kezdőesemény: közeledik a feladatok beadási határideje
    tevékenység: egy feladat elvégzése
    útválasztó: Van még hátra feladat?
    tevékenység: feladatok feltöltése githubra
    befejező esemény: az óra során a feladatok bemutathatóak
   Az elemek olvashatósági okokból vannak leírva a jegyzőkönyvbe, a köztük lévő kapcsolatok csak a bpmn.jpg-ben találhatóak meg.
- esettan
  Elkezdve: 2018.10.09.
  
  Fájlok: minden fájl a "ProductInventory" mappán belül
  
  Megoldás:
   A "Szoftverfejlesztés C++ nyelven" című könyv 14. fejezetének elolvasása (UML diagramok, C++)
   A "Szoftverfejlesztés C++ nyelven" című könyv 14. fejezetéből a kódrészletek lemásolása a megfelelő fájlokba és mappákba.
   A kód kikommentelése annak érdekében, hogy biztosan megértsem mi hol mit csinál.
   Változtatások elvégzése és a kód kiegészítése egy működőképes program elkészítése érdekében
  
  Állapot:
   2018.10.09.: library rész közel a befejezéshez, test rész még nincs kész
- BPEL
  Elkezdve: 2018.10.09.
  
  Állapot: környezet felállítva, ismeretlen hiba miatt nem működik
- reverse UML
  Elkezdve: 2018.10.10. (labor előtt)
  
  Állapot:
   2018.10.10.:
    LZWBinfa megkeresve githubon, letöltve a 3. hét mappájába.
	Importálás ArgoUML-el nem sikerült, a file->import sources menü alatti importáló eszköz exceptionnel záródott be.

Negyedik hét:
- Encoding
  - elkezdve: 2018.10.03. laboron
  - fájlok: MandelbrotHalmaz.java, MandelbrotHalmazNagyító.java
  - megoldás:
    - Mivel a MandelbrotHalmazNagyító osztály a a MandelbrotHalmaz osztályból származik, mindkettőnek jelen kellett lennie a fordításnál.
    - A fordítás sikeresen megtörtént az ékezetes betűk megőrzésével változtatás nélkül.
      Az ubuntu terminál alapértelmezett karakterkódolása UTF-8, így nem okozott problémát a fájlnév továbbítása a javac felé parancssori argumentumként.
      Amennyiben a karakterkódolással gond lett volna, meg lehetne változtatni az $LC_ALL és a $LANG környezeti változók beállításával.
      Amennyiben a bemeneti fájl kódolását nem ismeri fel a javac, akkor a "javac -encoding encoding_name filename.java" paranccsal fordítható le a forráskód.
      Ellenpélda az alapértelmezett beállításokkal való helyes működésre pl. a Windows XP command line, itt kifejtve:
      https://stackoverflow.com/questions/5993979/error-compiling-java-file-with-special-characters-in-class-name
- l334d1ct
  - elkezdve: 2018.10.03. laboron
  - befejezve: 2018.10.03. laboron
  - fájlok: L334.java
  - megoldás:
    Bekérek egy bemenetet a terminálból, felvágom szóközök mentén szavakra.
    Végigmegyek minden szón, és ha az szerepel a szótranszformációs hashmapben, akkor kicserélem egyben.
    Azokon a szavakon, amelyek nem szerepeltek, betűnként megyek végig, és a betűtranszformációs hashmap segítségével kicserélem az érintett betűket egyesével.
- OOCWC lexer
  elkezdve: 2018.10.03. laboron
  
  állapot:
   carlexer.ll értelmezése folyamatban, látszólag egy XML vagy ahhoz hasonló formátumú adatokat tartalmazó fájlt olvas be egy C++ programba
   
  megoldás:
- fullscreen
  Elkezdve: 2018.10.10 (labor előtt)
  Befejezve: 2018.10.10 (labor előtt)
  
  Megoldás:
   olyan java program, amely elindul teljes képernyős módban, megjelenít egy üres ablakot, és billentyű lenyomására kilép
   megoldás a labirintusjáték alapján
- Perceptron
  Elkezdve: 2018.10.10. (labor előtt)
  Fájlok: nlp.hpp
  
  Állapot: Perceptron osztály kiszedve az eredeti projekt környezetéből és elmentve az nlp.hpp-be, cuda eltávolítva (eredeti projektbeli függőség volt)